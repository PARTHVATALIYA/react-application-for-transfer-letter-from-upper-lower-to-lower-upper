{"ast":null,"code":"var _jsxFileName = \"D:\\\\react js\\\\demoapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport { BrowserRoute, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [alert, setalert]=useState(null)\n  // const showAlert = (massage,type)=>{\n  //   setalert({\n  //     msg : massage,\n  //     type : type\n  //   })\n  // }\n  const [mode, setMode] = useState('light');\n  const [bgColor, setBgColor] = useState('white');\n  const [txtColor, setTxtColor] = useState('black');\n\n  const darkMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#24074b';\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n    }\n\n    if (bgColor === 'white') {\n      setBgColor('black');\n    } else {\n      setBgColor('white');\n    }\n\n    if (txtColor === 'black') {\n      setTxtColor('white');\n    } else {\n      setTxtColor('black');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        mode: mode,\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/About\",\n          children: /*#__PURE__*/_jsxDEV(About, {\n            bgColor: bgColor,\n            txtColor: txtColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"VAm7AzQjVvqWPmBSnobbcZjCH/o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","About","Navbar","BrowserRoute","Routes","Route","App","mode","setMode","bgColor","setBgColor","txtColor","setTxtColor","darkMode","document","body","style","backgroundColor"],"sources":["D:/react js/demoapp/src/App.js"],"sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport {\n  BrowserRoute,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n\n  \n  // const [alert, setalert]=useState(null)\n  // const showAlert = (massage,type)=>{\n    //   setalert({\n      //     msg : massage,\n      //     type : type\n      //   })\n      // }\n      \n  const [mode, setMode]=useState('light')\n  const [bgColor, setBgColor]=useState('white')\n  const [txtColor,setTxtColor]=useState('black')\n  \n  const darkMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#24074b';\n      \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n\n    }\n    if(bgColor==='white'){\n      setBgColor('black');\n    }\n    else{\n      setBgColor('white');\n    }\n    if(txtColor==='black'){\n      setTxtColor('white');\n    }\n    else{\n      setTxtColor('black');\n    }\n    \n  }\n\n  \n  return (\n    <>\n    <Router>\n    <Navbar mode={mode} darkMode={darkMode} />\n<Routes>\n    <Route exact path=\"/About\">\n  \n          <About  bgColor={bgColor} txtColor={txtColor}/>\n    </Route>\n</Routes>\n          \n\n    </Router>\n      \n      \n      \n    </>\n\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,KAHF,QAIO,kBAJP;;;;AAMA,SAASC,GAAT,GAAe;EAAA;;EAGb;EACA;EACE;EACE;EACA;EACA;EACA;EAEJ,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAgBR,QAAQ,CAAC,OAAD,CAA9B;EACA,MAAM,CAACS,OAAD,EAAUC,UAAV,IAAsBV,QAAQ,CAAC,OAAD,CAApC;EACA,MAAM,CAACW,QAAD,EAAUC,WAAV,IAAuBZ,QAAQ,CAAC,OAAD,CAArC;;EAEA,MAAMa,QAAQ,GAAG,MAAI;IACnB,IAAGN,IAAI,KAAK,OAAZ,EAAoB;MAClBC,OAAO,CAAC,MAAD,CAAP;MACAM,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAoC,SAApC;IAED,CAJD,MAKI;MACFT,OAAO,CAAC,OAAD,CAAP;MACAM,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAoC,OAApC;IAED;;IACD,IAAGR,OAAO,KAAG,OAAb,EAAqB;MACnBC,UAAU,CAAC,OAAD,CAAV;IACD,CAFD,MAGI;MACFA,UAAU,CAAC,OAAD,CAAV;IACD;;IACD,IAAGC,QAAQ,KAAG,OAAd,EAAsB;MACpBC,WAAW,CAAC,OAAD,CAAX;IACD,CAFD,MAGI;MACFA,WAAW,CAAC,OAAD,CAAX;IACD;EAEF,CAxBD;;EA2BA,oBACE;IAAA,uBACA,QAAC,MAAD;MAAA,wBACA,QAAC,MAAD;QAAQ,IAAI,EAAEL,IAAd;QAAoB,QAAQ,EAAEM;MAA9B;QAAA;QAAA;QAAA;MAAA,QADA,eAEJ,QAAC,MAAD;QAAA,uBACI,QAAC,KAAD;UAAO,KAAK,MAAZ;UAAa,IAAI,EAAC,QAAlB;UAAA,uBAEM,QAAC,KAAD;YAAQ,OAAO,EAAEJ,OAAjB;YAA0B,QAAQ,EAAEE;UAApC;YAAA;YAAA;YAAA;UAAA;QAFN;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAFI;IAAA;MAAA;MAAA;MAAA;IAAA;EADA,iBADF;AAmBD;;GA7DQL,G;;KAAAA,G;AA+DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}
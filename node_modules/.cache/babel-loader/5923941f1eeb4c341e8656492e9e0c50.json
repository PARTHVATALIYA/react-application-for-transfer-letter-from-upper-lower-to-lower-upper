{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function About(props){return/*#__PURE__*/_jsxs(\"div\",{className:\"accordion \",id:\"accordionExample\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item \",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header \",id:\"headingOne\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button bg-\".concat(props.bgColor,\" text-\").concat(props.txtColor),type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseOne\",\"aria-expanded\":\"true\",\"aria-controls\":\"collapseOne\",children:\"Accordion Item #1\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseOne\",className:\"accordion-collapse collapse show\",\"aria-labelledby\":\"headingOne\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-bod bg-\".concat(props.bgColor,\" text-\").concat(props.txtColor),children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the first item's accordion body.\"}),\" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",id:\"headingTwo\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button bg-\".concat(props.bgColor,\" text-\").concat(props.txtColor),type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseTwo\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseTwo\",children:\"Accordion Item #2\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseTwo\",className:\"accordion-collapse collapse\",\"aria-labelledby\":\"headingTwo\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-bod bg-\".concat(props.bgColor,\" text-\").concat(props.txtColor),children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the second item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",id:\"headingThree\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button bg-\".concat(props.bgColor,\" text-\").concat(props.txtColor),type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseThree\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseThree\",children:\"Accordion Item #3\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseThree\",className:\"accordion-collapse collapse\",\"aria-labelledby\":\"headingThree\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-bod bg-\".concat(props.bgColor,\" text-\").concat(props.txtColor),children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the third item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]})]});}","map":{"version":3,"names":["React","About","props","bgColor","txtColor"],"sources":["D:/react js/firstreactapp/src/components/About.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n  return (\r\n    <div className=\"accordion \"  id=\"accordionExample\">\r\n        <div className=\"accordion-item \">\r\n            <h2 className=\"accordion-header \" id=\"headingOne\">\r\n            <button className={`accordion-button bg-${props.bgColor} text-${props.txtColor}`} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className={`accordion-bod bg-${props.bgColor} text-${props.txtColor}`}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className={`accordion-button bg-${props.bgColor} text-${props.txtColor}`}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className={`accordion-bod bg-${props.bgColor} text-${props.txtColor}`}>\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className={`accordion-button bg-${props.bgColor} text-${props.txtColor}`}  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className={`accordion-bod bg-${props.bgColor} text-${props.txtColor}`}>\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":"AAAA,MAAOA,MAAP,KAAkB,OAAlB,C,wFAEA,cAAe,SAASC,MAAT,CAAeC,KAAf,CAAsB,CACnC,mBACE,aAAK,SAAS,CAAC,YAAf,CAA6B,EAAE,CAAC,kBAAhC,wBACI,aAAK,SAAS,CAAC,iBAAf,wBACI,WAAI,SAAS,CAAC,mBAAd,CAAkC,EAAE,CAAC,YAArC,uBACA,eAAQ,SAAS,+BAAyBA,KAAK,CAACC,OAA/B,kBAA+CD,KAAK,CAACE,QAArD,CAAjB,CAAkF,IAAI,CAAC,QAAvF,CAAgG,iBAAe,UAA/G,CAA0H,iBAAe,cAAzI,CAAwJ,gBAAc,MAAtK,CAA6K,gBAAc,aAA3L,+BADA,EADJ,cAMI,YAAK,EAAE,CAAC,aAAR,CAAsB,SAAS,CAAC,kCAAhC,CAAmE,kBAAgB,YAAnF,CAAgG,iBAAe,mBAA/G,uBACA,aAAK,SAAS,4BAAsBF,KAAK,CAACC,OAA5B,kBAA4CD,KAAK,CAACE,QAAlD,CAAd,wBACI,oEADJ,2XACua,yCADva,kDADA,EANJ,GADJ,cAaI,aAAK,SAAS,CAAC,gBAAf,wBACI,WAAI,SAAS,CAAC,kBAAd,CAAiC,EAAE,CAAC,YAApC,uBACA,eAAQ,SAAS,+BAAyBF,KAAK,CAACC,OAA/B,kBAA+CD,KAAK,CAACE,QAArD,CAAjB,CAAmF,IAAI,CAAC,QAAxF,CAAiG,iBAAe,UAAhH,CAA2H,iBAAe,cAA1I,CAAyJ,gBAAc,OAAvK,CAA+K,gBAAc,aAA7L,+BADA,EADJ,cAMI,YAAK,EAAE,CAAC,aAAR,CAAsB,SAAS,CAAC,6BAAhC,CAA8D,kBAAgB,YAA9E,CAA2F,iBAAe,mBAA1G,uBACA,aAAK,SAAS,4BAAsBF,KAAK,CAACC,OAA5B,kBAA4CD,KAAK,CAACE,QAAlD,CAAd,wBACI,qEADJ,4XACya,yCADza,kDADA,EANJ,GAbJ,cAyBI,aAAK,SAAS,CAAC,gBAAf,wBACI,WAAI,SAAS,CAAC,kBAAd,CAAiC,EAAE,CAAC,cAApC,uBACA,eAAQ,SAAS,+BAAyBF,KAAK,CAACC,OAA/B,kBAA+CD,KAAK,CAACE,QAArD,CAAjB,CAAmF,IAAI,CAAC,QAAxF,CAAiG,iBAAe,UAAhH,CAA2H,iBAAe,gBAA1I,CAA2J,gBAAc,OAAzK,CAAiL,gBAAc,eAA/L,+BADA,EADJ,cAMI,YAAK,EAAE,CAAC,eAAR,CAAwB,SAAS,CAAC,6BAAlC,CAAgE,kBAAgB,cAAhF,CAA+F,iBAAe,mBAA9G,uBACA,aAAK,SAAS,4BAAsBF,KAAK,CAACC,OAA5B,kBAA4CD,KAAK,CAACE,QAAlD,CAAd,wBACI,oEADJ,4XACwa,yCADxa,kDADA,EANJ,GAzBJ,GADF,CAwCD"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\react js\\\\demoapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [alert, setalert]=useState(null)\n  // const showAlert = (massage,type)=>{\n  //   setalert({\n  //     msg : massage,\n  //     type : type\n  //   })\n  // }\n  const [mode, setMode] = useState('light'); // const [bgColor, setBgColor]=useState('white')\n  // const [txtColor,setTxtColor]=useState('black')\n\n  const greenMode = () => {\n    if (mode === 'light') {\n      setMode('green');\n    } else {\n      setMode('light');\n    }\n  }; // const darkMode = ()=>{\n  //   if(mode === 'light'){\n  //     setMode('dark');\n  //     document.body.style.backgroundColor='#24074b';\n  //   }\n  //   else{\n  //     setMode('light');\n  //     document.body.style.backgroundColor='white';\n  //   }\n  //   if(bgColor==='white'){\n  //     setBgColor('black');\n  //   }\n  //   else{\n  //     setBgColor('white');\n  //   }\n  //   if(txtColor==='black'){\n  //     setTxtColor('white');\n  //   }\n  //   else{\n  //     setTxtColor('black');\n  //   }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Navbar, {\n      mode: mode,\n      greenMode: greenMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"Vs8mkvwR7CZ7J6LLj80enWdttac=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","About","Navbar","App","mode","setMode","greenMode"],"sources":["D:/react js/demoapp/src/App.js"],"sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n\n  \n  // const [alert, setalert]=useState(null)\n  // const showAlert = (massage,type)=>{\n    //   setalert({\n      //     msg : massage,\n      //     type : type\n      //   })\n      // }\n      \n  const [mode, setMode]=useState('light')\n  // const [bgColor, setBgColor]=useState('white')\n  // const [txtColor,setTxtColor]=useState('black')\n  const greenMode = ()=>{\n    if(mode==='light'){\n      setMode('green');\n    }\n    else{\n      setMode('light');\n    }\n  }\n  // const darkMode = ()=>{\n  //   if(mode === 'light'){\n  //     setMode('dark');\n  //     document.body.style.backgroundColor='#24074b';\n      \n  //   }\n  //   else{\n  //     setMode('light');\n  //     document.body.style.backgroundColor='white';\n\n  //   }\n  //   if(bgColor==='white'){\n  //     setBgColor('black');\n  //   }\n  //   else{\n  //     setBgColor('white');\n  //   }\n  //   if(txtColor==='black'){\n  //     setTxtColor('white');\n  //   }\n  //   else{\n  //     setTxtColor('black');\n  //   }\n    \n  // }\n\n  \n  return (\n    <>\n      {/* <Navbar mode={mode} darkMode={darkMode} greenMode={greenMode}/> */}\n      <Navbar mode={mode}  greenMode={greenMode}/>\n\n      {/* <About  bgColor={bgColor} txtColor={txtColor}/> */}\n    </>\n\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EAGb;EACA;EACE;EACE;EACA;EACA;EACA;EAEJ,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAgBL,QAAQ,CAAC,OAAD,CAA9B,CAXa,CAYb;EACA;;EACA,MAAMM,SAAS,GAAG,MAAI;IACpB,IAAGF,IAAI,KAAG,OAAV,EAAkB;MAChBC,OAAO,CAAC,OAAD,CAAP;IACD,CAFD,MAGI;MACFA,OAAO,CAAC,OAAD,CAAP;IACD;EACF,CAPD,CAda,CAsBb;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EAGA,oBACE;IAAA,uBAEE,QAAC,MAAD;MAAQ,IAAI,EAAED,IAAd;MAAqB,SAAS,EAAEE;IAAhC;MAAA;MAAA;MAAA;IAAA;EAFF,iBADF;AASD;;GA1DQH,G;;KAAAA,G;AA4DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}